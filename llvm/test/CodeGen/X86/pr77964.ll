; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc < %s -mtriple=x86_64-unknown-unknown | FileCheck %s --check-prefixes=CHECK,NOBMI
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+bmi2 | FileCheck %s --check-prefixes=CHECK,BMI

declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32)
declare { i16, i1 } @llvm.uadd.with.overflow.i16(i16, i16)

define zeroext i16 @checksum(ptr %0) {
; NOBMI-LABEL: checksum:
; NOBMI:       # %bb.0:
; NOBMI-NEXT:    movl (%rdi), %ecx
; NOBMI-NEXT:    addl 4(%rdi), %ecx
; NOBMI-NEXT:    adcl 8(%rdi), %ecx
; NOBMI-NEXT:    adcl 12(%rdi), %ecx
; NOBMI-NEXT:    adcl 16(%rdi), %ecx
; NOBMI-NEXT:    setb %dl
; NOBMI-NEXT:    movl %ecx, %eax
; NOBMI-NEXT:    shrl $16, %eax
; NOBMI-NEXT:    addb $255, %dl
; NOBMI-NEXT:    adcw %cx, %ax
; NOBMI-NEXT:    adcw $0, %ax
; NOBMI-NEXT:    notl %eax
; NOBMI-NEXT:    # kill: def $ax killed $ax killed $eax
; NOBMI-NEXT:    retq
;
; BMI-LABEL: checksum:
; BMI:       # %bb.0:
; BMI-NEXT:    movl (%rdi), %ecx
; BMI-NEXT:    addl 4(%rdi), %ecx
; BMI-NEXT:    adcl 8(%rdi), %ecx
; BMI-NEXT:    adcl 12(%rdi), %ecx
; BMI-NEXT:    adcl 16(%rdi), %ecx
; BMI-NEXT:    rorxl $16, %ecx, %eax
; BMI-NEXT:    adcw %cx, %ax
; BMI-NEXT:    adcw $0, %ax
; BMI-NEXT:    notl %eax
; BMI-NEXT:    # kill: def $ax killed $ax killed $eax
; BMI-NEXT:    retq
  %2 = load i32, ptr %0
  %3 = getelementptr inbounds i32, ptr %0, i64 1
  %4 = load i32, ptr %3
  %5 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %2, i32 %4)
  %6 = extractvalue { i32, i1 } %5, 1
  %7 = extractvalue { i32, i1 } %5, 0
  %8 = getelementptr inbounds i32, ptr %0, i64 2
  %9 = load i32, ptr %8
  %10 = zext i1 %6 to i32
  %11 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %7, i32 %9)
  %12 = extractvalue { i32, i1 } %11, 1
  %13 = extractvalue { i32, i1 } %11, 0
  %14 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %13, i32 %10)
  %15 = extractvalue { i32, i1 } %14, 1
  %16 = extractvalue { i32, i1 } %14, 0
  %17 = or i1 %12, %15
  %18 = getelementptr inbounds i32, ptr %0, i64 3
  %19 = load i32, ptr %18
  %20 = zext i1 %17 to i32
  %21 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %16, i32 %19)
  %22 = extractvalue { i32, i1 } %21, 1
  %23 = extractvalue { i32, i1 } %21, 0
  %24 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %23, i32 %20)
  %25 = extractvalue { i32, i1 } %24, 1
  %26 = extractvalue { i32, i1 } %24, 0
  %27 = or i1 %22, %25
  %28 = getelementptr inbounds i32, ptr %0, i64 4
  %29 = load i32, ptr %28
  %30 = zext i1 %27 to i32
  %31 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %26, i32 %29)
  %32 = extractvalue { i32, i1 } %31, 1
  %33 = extractvalue { i32, i1 } %31, 0
  %34 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %33, i32 %30)
  %35 = extractvalue { i32, i1 } %34, 1
  %36 = extractvalue { i32, i1 } %34, 0
  %37 = or i1 %32, %35
  %38 = zext i1 %37 to i16
  %39 = trunc i32 %36 to i16
  %40 = lshr i32 %36, 16
  %41 = trunc i32 %40 to i16
  %42 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %39, i16 %41)
  %43 = extractvalue { i16, i1 } %42, 1
  %44 = extractvalue { i16, i1 } %42, 0
  %45 = call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %44, i16 %38)
  %46 = extractvalue { i16, i1 } %45, 1
  %47 = extractvalue { i16, i1 } %45, 0
  %48 = or i1 %43, %46
  %49 = zext i1 %48 to i16
  %50 = add i16 %47, %49
  %51 = xor i16 %50, -1
  ret i16 %51
}

; This is expected to just load the byte and not use rorx.
define i8 @extract_aligned_byte(ptr %0) {
; CHECK-LABEL: extract_aligned_byte:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movzbl 6(%rdi), %eax
; CHECK-NEXT:    retq
  %2 = load i64, ptr %0
  %3 = lshr i64 %2, 48
  %4 = trunc i64 %3 to i8
  ret i8 %4
}

define i8 @extract_unaligned_byte(ptr %0) {
; NOBMI-LABEL: extract_unaligned_byte:
; NOBMI:       # %bb.0:
; NOBMI-NEXT:    movq (%rdi), %rax
; NOBMI-NEXT:    shrq $52, %rax
; NOBMI-NEXT:    # kill: def $al killed $al killed $rax
; NOBMI-NEXT:    retq
;
; BMI-LABEL: extract_unaligned_byte:
; BMI:       # %bb.0:
; BMI-NEXT:    rorxq $52, (%rdi), %rax
; BMI-NEXT:    # kill: def $al killed $al killed $rax
; BMI-NEXT:    retq
  %2 = load i64, ptr %0
  %3 = lshr i64 %2, 52
  %4 = trunc i64 %3 to i8
  ret i8 %4
}
